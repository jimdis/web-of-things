/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * https://tools.ietf.org/html/rfc3986#page-50
 */
export type Rfc3986Uri = string

export interface WebThingLabelSchema {
  id?: Rfc3986Uri
  name?: string
  description?: string
  createdAt?: string
  updatedAt?: string
  tags?: string[]
  customFields?: {
    [k: string]: any
  }
  links?: {
    model?: Link
    /**
     * A Property keeps track of a set of variables about a device (its location, the temperature sensor reading, etc.). The Property URL is the result of resolving the id returned in the representation of a Property against the destination URL of the properties link that gave birth to it.
     */
    properties?: {
      link?: Rfc3986Uri
      /**
       * A concise description of the link
       */
      title?: string
      resources?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^.+$".
         */
        [k: string]: {
          name?: string
          description?: string
          values?: {
            /**
             * This interface was referenced by `undefined`'s JSON-Schema definition
             * via the `patternProperty` "^.+$".
             */
            [k: string]: {
              name?: string
              description?: string
              [k: string]: any
            } & ValueDefinition
          }
          [k: string]: any
        }
      }
    }
    /**
     * The Action URL is the result of resolving the id returned in an Action description against the destination URL of the actions link that gave birth to it. In response to an HTTP GET request on the destination URL of an actions link exposed by a resource, an Extended Web Thing must return an array of Action descriptions that the initial resource may achieve.
     */
    actions?: {
      link?: Rfc3986Uri
      /**
       * A concise description of the link
       */
      title?: string
      resources?: {
        /**
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^.+$".
         */
        [k: string]: {
          values?: {
            [k: string]: any
          }
          [k: string]: any
        }
      }
    }
    product?: Link
    type?: Link
    help?: Link
    ui?: Link
    [k: string]: any
  }
  [k: string]: any
}
export interface Link {
  link?: Rfc3986Uri
  /**
   * A concise description of the link
   */
  title?: string
  [k: string]: any
}
/**
 * Several resources support values (particularly Actions and Properties). A values object contains the description of a set of values identified by their name. The description includes the value type, unit, and possible concrete values that the value can take. A values object is typically used to define the parameters a Client can use when it issues an Action or accesses the channels of a Property
 */
export interface ValueDefinition {
  /**
   * A human-readable caption for this value
   */
  name?: string
  /**
   * A human-readable description of this value
   */
  description?: string
  /**
   * The type of this value. The supported types are integer, float, boolean, string
   */
  type?: 'integer' | 'float' | 'boolean' | 'string'
  /**
   * The unit of this value, using one of the full names defined in the International System of Units. Example: "meter per second squared"
   */
  unit?: string
  /**
   * Specifies whether this value is required or optional. If omitted, the default is true.
   */
  required?: boolean
  /**
   * The minimal concrete value that this value can take
   */
  minValue?: number
  /**
   * The maximal concrete value of this value
   */
  maxValue?: number
  /**
   * Specifies a set of concrete values that this value can take, e.g. {"LOCK":"Locks the door.", "UNLOCK":"unlocks the door."}
   */
  enum?: {
    [k: string]: any
  }
  customFields?: {
    [k: string]: any
  }
}
